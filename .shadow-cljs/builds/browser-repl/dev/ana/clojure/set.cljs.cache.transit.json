["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\ngoog.require('cljs.core');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\nreturn (function (p1__34298_SHARP_){\nreturn (max === p1__34298_SHARP_);\n});})(max))\n,coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__34303 = arguments.length;\nswitch (G__34303) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___34522 = arguments.length;\nvar i__4731__auto___34523 = (0);\nwhile(true){\nif((i__4731__auto___34523 < len__4730__auto___34522)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___34523]));\n\nvar G__34524 = (i__4731__auto___34523 + (1));\ni__4731__auto___34523 = G__34524;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.union.cljs$lang$applyTo = (function (seq34300){\nvar G__34301 = cljs.core.first(seq34300);\nvar seq34300__$1 = cljs.core.next(seq34300);\nvar G__34302 = cljs.core.first(seq34300__$1);\nvar seq34300__$2 = cljs.core.next(seq34300__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34301,G__34302,seq34300__$2);\n});\n\nclojure.set.union.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__34315 = arguments.length;\nswitch (G__34315) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___34526 = arguments.length;\nvar i__4731__auto___34527 = (0);\nwhile(true){\nif((i__4731__auto___34527 < len__4730__auto___34526)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___34527]));\n\nvar G__34528 = (i__4731__auto___34527 + (1));\ni__4731__auto___34527 = G__34528;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__34529 = s2;\nvar G__34530 = s1;\ns1 = G__34529;\ns2 = G__34530;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__34310_SHARP_){\nreturn (- cljs.core.count(p1__34310_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.intersection.cljs$lang$applyTo = (function (seq34312){\nvar G__34313 = cljs.core.first(seq34312);\nvar seq34312__$1 = cljs.core.next(seq34312);\nvar G__34314 = cljs.core.first(seq34312__$1);\nvar seq34312__$2 = cljs.core.next(seq34312__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34313,G__34314,seq34312__$2);\n});\n\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__34330 = arguments.length;\nswitch (G__34330) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___34532 = arguments.length;\nvar i__4731__auto___34533 = (0);\nwhile(true){\nif((i__4731__auto___34533 < len__4730__auto___34532)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___34533]));\n\nvar G__34534 = (i__4731__auto___34533 + (1));\ni__4731__auto___34533 = G__34534;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n});\n\n/** @this {Function} */\nclojure.set.difference.cljs$lang$applyTo = (function (seq34327){\nvar G__34328 = cljs.core.first(seq34327);\nvar seq34327__$1 = cljs.core.next(seq34327);\nvar G__34329 = cljs.core.first(seq34327__$1);\nvar seq34327__$2 = cljs.core.next(seq34327__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34328,G__34329,seq34327__$2);\n});\n\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__34476_SHARP_){\nreturn cljs.core.select_keys(p1__34476_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__34478){\nvar vec__34479 = p__34478;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34479,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34479,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__34482_SHARP_){\nreturn clojure.set.rename_keys(p1__34482_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__34486){\nvar vec__34488 = p__34486;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34488,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34488,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__34497 = arguments.length;\nswitch (G__34497) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__34499 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34499,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34499,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__34499,r,s,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__34514 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__34514) : idx.call(null,G__34514));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__34499,r,s,idx){\nreturn (function (p1__34491_SHARP_,p2__34492_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34491_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__34492_SHARP_,x], 0)));\n});})(found,ks,vec__34499,r,s,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(ks,vec__34499,r,s,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__34515 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34515,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34515,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34515,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__34515,r,s,k,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__34518 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__34518) : idx.call(null,G__34518));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__34515,r,s,k,idx){\nreturn (function (p1__34493_SHARP_,p2__34494_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34493_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__34494_SHARP_,x], 0)));\n});})(found,vec__34515,r,s,k,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(vec__34515,r,s,k,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n});\n\nclojure.set.join.cljs$lang$maxFixedArity = 3;\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__34519_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__34519_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__34520_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__34520_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^I","~$goog","^J"],"~:seen",["^B",[]],"~:uses",null,"~:require-macros",["^ ","^I","^I"],"~:form",["~#list",["~$ns","^D"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^J","^I"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1570713860700,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;AAYA,AAAA,AAAOA,AAAgBC,AAAEC;AAAzB,AAAA;AAGE,AAAMC,AAAI,AAACC,AAAMC,AAAQJ,AAAEC;AAA3B,AACE,AAACI,AAAKH,AAAI,AAAA,AAACK;AAADD;AAAA,AAAS,AAAAA,AAAYJ;;AAAOD;;AAE1C,AAAA;;;AAAA,AAAAO,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ;AAAN,AAAA;;;AAAA,AAAA,AAAA,AAAMA,AAGFY;AAHJ,AAGQA;;;AAHR,AAAA,AAAA,AAAMZ,AAIFY,AAAGC;AAJP,AAKK,AAAI,AAAG,AAACC,AAAMF,AAAI,AAACE,AAAMD;AACvB,AAACE,AAAOC,AAAKH,AAAGD;;AAChB,AAACG,AAAOC,AAAKJ,AAAGC;;;;AAPvB,AAAA,AAAA,AAAA,AAAMb,AAQFY,AAAGC,AAAKI;AARZ,AASK,AAAMC,AAAa,AAAC7B,AAAeyB,AAAM,AAACK,AAAKF,AAAKJ,AAAGD;AAAvD,AACE,AAACG,AAAOK,AAAK,AAACZ,AAAMU,AAAc,AAACG,AAAKH;;;AAV/C;AAAA,AAAA,AAAA,AAAAZ,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAYA,AAAA;;;AAAA,AAAAF,AAAMyB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB;;;;;AAAA,AAAA,AAAA,AAAMmB,AAEFX;AAFJ,AAEQA;;;AAFR,AAAA,AAAA,AAAMW,AAGFX,AAAGC;;AAHP,AAIK,AAAI,AAAG,AAACC,AAAMD,AAAI,AAACC,AAAMF;AACvB,AAAOC;AAAGD;;;;;AACV,AAACG,AAAO;AAAKY,AAAOC;AAAZ,AACI,AAAI,AAACC,AAAUhB,AAAGe;AAC9BD;;AACc,AAACG,AAAKH,AAAOC;;;AAC1BhB,AAAGA;;;;;;AAVX,AAAA,AAAA,AAAA,AAAMW,AAWFX,AAAGC,AAAKI;AAXZ,AAYK,AAAMC,AAAa,AAAA,AAAAa,AAAC1C;AAAD,AAAiB,AAAG,AAAA0C,AAACjB;AAAU,AAACK,AAAKF,AAAKJ,AAAGD;AAAhE,AACE,AAACG,AAAOQ,AAAa,AAACf,AAAMU,AAAc,AAACG,AAAKH;;;AAbvD;AAAA,AAAA,AAAA,AAAAM,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAjB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAAE,AAAA,AAAAlB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAA,AAAAc,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMD;;AAAN,AAeA,AAAA;;;AAAA,AAAAzB,AAAMmC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAhC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7B;;;;;AAAA,AAAA,AAAA,AAAM6B,AAEFrB;AAFJ,AAEQA;;;AAFR,AAAA,AAAA,AAAMqB,AAGFrB,AAAGC;AAHP,AAIK,AAAI,AAAG,AAACC,AAAMF,AAAI,AAACE,AAAMD;AACvB,AAACE,AAAO,AAAKY,AAAOC;AAAZ,AACI,AAAI,AAACC,AAAUhB,AAAGe;AAChB,AAACE,AAAKH,AAAOC;;AACbD;;AACNf,AAAGA;;AACX,AAACG,AAAOsB,AAAKzB,AAAGC;;;;AAVvB,AAAA,AAAA,AAAA,AAAMoB,AAWFrB,AAAGC,AAAKI;AAXZ,AAYK,AAACF,AAAOkB,AAAWrB,AAAG,AAAC0B,AAAKrB,AAAKJ;;;AAZtC;AAAA,AAAA,AAAA,AAAAqB,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA3B,AAAA0B;AAAAA,AAAA,AAAAzB,AAAAyB;AAAAE,AAAA,AAAA5B,AAAA0B;AAAAA,AAAA,AAAAzB,AAAAyB;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAA,AAAAA,AAAAwB,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMD;;AAAN,AAeA;;;AAAA,AAAMM,AAEHC,AAAKC;AAFR,AAGI,AAAC1B,AAAO,AAAK2B,AAAEpD;AAAP,AAAU,AAAI,AAACkD,AAAAA,AAAAA,AAAKlD,AAAAA;AAAGoD;;AAAE,AAACZ,AAAKY,AAAEpD;;AACjCmD,AAAKA;;AAEjB;;;AAAA,AAAME,AAEHC,AAAKC;AAFR,AAGI,AAACC,AAAI,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAACE,AAAcJ;AAAID;;AAElC;;;AAAA,AAAMM,AAEHC,AAAIC;AAFP,AAGI,AAACrC,AACA,AAAAsC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZ,AACE,AAAI,AAAC7B,AAAUsB,AAAIM;AACjB,AAACE,AAAMH,AAAEE,AAAI,AAACE,AAAIT,AAAIM;;AACtBD;;AACJ,AAAC/D,AAAMoE,AAAOV,AAAI,AAACW,AAAKV,AAAOA;;AAEpC;;;AAAA,AAAMW,AAEHnB,AAAKQ;AAFR,AAGI,AAACN,AAAI,AAAA,AAAAkB,AAAChB;AAAD,AAAM,AAAAgB,AAACd,AAAcE;AAAMR;;AAEpC;;;;AAAA,AAAMqB,AAGHrB,AAAKC;AAHR,AAII,AAAC9B,AACA,AAAKyC,AAAEU;AAAP,AACE,AAAMC,AAAG,AAAClB,AAAYiB,AAAErB;AAAxB,AACE,AAACc,AAAMH,AAAEW,AAAG,AAAC7B,AAAK,AAAA,AAAC8B,AAAIZ,AAAEW,AAAQD;AAHtC,AAIItB;;AAER;;;AAAA,AAAMyB,AAEHb;AAFH,AAEM,AAACzC,AAAO,AAAAuD,AAAKd;AAAL,AAAA,AAAAe,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAAQjF;AAAR,AAAAiE,AAAAgB,AAAA,AAAA,AAAUC;AAAV,AAAc,AAACb,AAAMH,AAAEgB,AAAElF;AAAjC,AAAwCkE;;AAE9C,AAAA;;;;;AAAA,AAAA1D,AAAM4E;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAIF9B,AAAKgC;AAJT,AAKG,AAAI,AAAK,AAACC,AAAIjC,AAAM,AAACiC,AAAID;AACvB,AAAM/B,AAAG,AAACkC,AAAa,AAACjC,AAAI,AAACgB,AAAK,AAACtD,AAAMoC,AAAQ,AAACE,AAAI,AAACgB,AAAK,AAACtD,AAAMoE;AAAnEE,AACY,AAAA,AAAA,AAAI,AAAI,AAAChE,AAAM8B,AAAM,AAAC9B,AAAM8D,AACzBhC,AAAKgC,AACLA,AAAKhC;AAHpB,AAAAW,AAAAuB,AAAA,AAAA,AACOE;AADP,AAAAzB,AAAAuB,AAAA,AAAA,AACSpC;AAGHuC,AAAI,AAAChB,AAAMe,AAAEnC;AAJnB,AAKE,AAAC9B,AAAO;AAAKmE,AAAIhB;AAAT,AACE,AAAMiB,AAAM,AAAAC,AAAK,AAACnC,AAAYiB,AAAErB;AAApB,AAAA,AAAAuC,AAAAA,AAACH,AAAAA,AAAAA;;AAAb,AACE,AAAIE;AACF,AAAA,AAACpE;AAADsE,AAAAC;AAAA,AAAS,AAAAD,AAAC/C,AAAQ,AAAAgD,AAACC,AAASrB;;AAAIgB,AAAIC;;AACpCD;;;AAJd,AAKYxC;;AAXhB;;;;AALH,AAAA,AAAA,AAAMgC,AAkBF9B,AAAKgC,AAAKY;AAlBd,AAmBG,AAAAC,AAAc,AAAA,AAAA,AAAI,AAAI,AAAC3E,AAAM8B,AAAM,AAAC9B,AAAM8D,AACzBhC,AAAKgC,AAAK,AAACP,AAAWmB,AACtBZ,AAAKhC,AAAK4C;AAF3B,AAAAjC,AAAAkC,AAAA,AAAA,AAAOT;AAAP,AAAAzB,AAAAkC,AAAA,AAAA,AAAS/C;AAAT,AAAAa,AAAAkC,AAAA,AAAA,AAAWnG;AAGL2F,AAAI,AAAChB,AAAMe,AAAE,AAACU,AAAKpG;AAHzB,AAIE,AAACyB,AAAO;AAAKmE,AAAIhB;AAAT,AACE,AAAMiB,AAAM,AAAAQ,AAAK,AAACzC,AAAY,AAACD,AAAYiB,AAAE,AAACJ,AAAKxE,AAAIA;AAA3C,AAAA,AAAAqG,AAAAA,AAACV,AAAAA,AAAAA;;AAAb,AACE,AAAIE;AACF,AAAA,AAACpE;AAAD6E,AAAAC;AAAA,AAAS,AAAAD,AAACtD,AAAQ,AAAAuD,AAACN,AAASrB;;AAAIgB,AAAIC;;AACpCD;;;AAJd,AAKYxC;;;AA5BjB,AAAA,AAAA,AAAMgC;;AAAN,AA8BA;;;AAAA,AAAMoB,AAEHC,AAAKC;AAFR,AAGE,AAAK,AAAI,AAAClF,AAAMiF,AAAM,AAACjF,AAAMkF,AACxB,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAAD,AAACpE,AAAUmE;AAAQD;;AAEnC;;;AAAA,AAAMI,AAEHJ,AAAKC;AAFR,AAGE,AAAK,AAAI,AAAClF,AAAMiF,AAAM,AAACjF,AAAMkF,AACxB,AAAA,AAAAI,AAACF;AAAD,AAAS,AAAAE,AAACvE,AAAUkE;AAAQC;;AAEnC","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","cljs.core/cons","p1__34298#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","var_args","G__34303","clojure.set/union","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq34300","G__34301","cljs.core/first","cljs.core/next","G__34302","self__4717__auto__","s1","s2","cljs.core/count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","sets","bubbled-sets","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/into","cljs.core/rest","G__34315","clojure.set/intersection","seq34312","G__34313","G__34314","result","item","cljs.core/contains?","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__34310#","G__34330","clojure.set/difference","seq34327","G__34328","G__34329","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__34476#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__34478","vec__34479","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","old","new","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__34482#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__34486","vec__34488","v","G__34497","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__34499","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","idx","ret","found","G__34514","p1__34491#","p2__34492#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","km","vec__34515","cljs.core/vals","G__34518","p1__34493#","p2__34494#","clojure.set/subset?","set1","set2","p1__34519#","cljs.core/every?","clojure.set/superset?","p1__34520#"]]],"~:cache-keys",["~#cmap",[["^U","goog/math/math.js"],[1570710076000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^J","~$goog.array","~$goog.asserts"]]],["^U","goog/array/array.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1;"]]],["^U","goog/debug/error.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/dom/nodetype.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/object/object.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],"~:SHADOW-TIMESTAMP",[1570710078000,1550594847000],["^U","goog/math/long.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1;","~$goog.reflect"]]],["^U","goog/string/internal.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/functions/functions.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/structs/map.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^U","goog/asserts/asserts.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^U","goog/uri/uri.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1:","^1;","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^U","goog/base.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",[]]],["^U","goog/structs/structs.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1:","~$goog.object"]]],["^U","goog/string/string.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","~$goog.string.internal"]]],["^U","goog/reflect/reflect.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/string/stringbuffer.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","goog/iter/iter.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1:","^1;","~$goog.functions","~$goog.math"]]],["^U","cljs/core.cljs"],[1550594847000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["~$goog.math.Long","~$goog.math.Integer","^1B","^1H","^1:","~$goog.Uri","~$goog.string.StringBuffer"]]],["^U","goog/math/integer.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J"]]],["^U","clojure/set.cljs"],[1550594847000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^I"]]],["^U","goog/uri/utils.js"],[1570710076000,"^16",["^ ","^17",null,"^18",["^B",[]],"^19",["^J","^1:","^1;","^1B"]]]]],"~:clj-info",["^ ","jar:file:/Users/gmp26/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1513682598000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1548065709000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1548065709000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1548065709000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1548065709000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1550594847000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1560761009000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1548065709000,"jar:file:/Users/gmp26/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1560761009000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J"],"^K",["^B",[]],"~:shadow/js-access-global",["^B",["Error"]],"^L",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^O",["~$quote",["^O",[[],["~$s1"],["^2D","~$s2"],["^2D","^2E","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^O",[[],["^2D"],["^2D","^2E"]]],"^2B",["^O",[[],["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"~:arglists-meta",["^O",[null,null,null,null]]]],"^C","~$clojure.set/union","^6","clojure/set.cljs","^:",12,"^2G",["^ ","^2H",true,"^2I",2,"^2J",2,"^2K",["^O",[[],["^2D"],["^2D","^2E"]]],"^2B",["^O",[[],["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^2L",["^O",[null,null,null,null]]],"^2K",["^O",[[],["^2D"],["^2D","^2E"]]],"~:protocol-impl",null,"^2I",2,"^2L",["^O",[null,null,null,null]],"^8",1,"^2H",true,"~:methods",[["^ ","^2I",0,"^2H",false,"~:tag","~$cljs.core/ISet"],["^ ","^2I",1,"^2H",false],["^ ","^2I",2,"^2H",false,"^2P",["^B",[null,"~$any"]]],["^ ","^2I",2,"^2H",true,"^2P",["^B",[null,"^2R"]]]],"^7",19,"^9",19,"^2J",2,"~:fn-var",true,"^2B",["^O",[[],["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^2B",["^O",["^2C",["^O",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^C","~$clojure.set/map-invert","^6","clojure/set.cljs","^:",17,"^2K",["^O",[["~$m"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",97,"~:ret-tag",["^B",[null,"^2R"]],"^9",97,"^2J",1,"^2S",true,"^2B",["^O",["^2C",["^O",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^2B",["^O",["^2C",["^O",[["~$xrel","~$yrel"],["^2X","^2Y","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^2G",["^ ","^2H",false,"^2I",3,"^2J",3,"^2K",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^2B",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^2L",["^O",[null,null]]]],"^C","~$clojure.set/join","^6","clojure/set.cljs","^:",11,"^2G",["^ ","^2H",false,"^2I",3,"^2J",3,"^2K",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^2B",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^2L",["^O",[null,null]]],"^2K",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^2N",null,"^2I",3,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^2O",[["^ ","^2I",2,"^2H",false,"^2P",["^B",[null,"^2R","^2Q"]]],["^ ","^2I",3,"^2H",false,"^2P",["^B",[null,"^2R"]]]],"^7",101,"^9",101,"^2J",3,"^2S",true,"^2B",["^O",[["^2X","^2Y"],["^2X","^2Y","^2Z"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^2B",["^O",["^2C",["^O",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^C","~$clojure.set/select","^6","clojure/set.cljs","^:",13,"^2K",["^O",[["^31","^32"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",61,"^2V",["^B",[null,"^2R"]],"^9",61,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^31","^32"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^2B",["^O",["^2C",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]]]],"^;","Return a set that is the intersection of the input sets","^2G",["^ ","^2H",true,"^2I",2,"^2J",2,"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^2L",["^O",[null,null,null]]]],"^C","~$clojure.set/intersection","^6","clojure/set.cljs","^:",19,"^2G",["^ ","^2H",true,"^2I",2,"^2J",2,"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^2L",["^O",[null,null,null]]],"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2N",null,"^2I",2,"^2L",["^O",[null,null,null]],"^8",1,"^2H",true,"^2O",[["^ ","^2I",1,"^2H",false],["^ ","^2I",2,"^2H",false,"^2P",["^B",[null,"^2R"]]],["^ ","^2I",2,"^2H",true,"^2P",["^B",[null,"^2R"]]]],"^7",31,"^9",31,"^2J",2,"^2S",true,"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^2B",["^O",["^2C",["^O",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^C","~$clojure.set/superset?","^6","clojure/set.cljs","^:",16,"^2K",["^O",[["^37","^38"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",137,"^2V","~$boolean","^9",137,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^37","^38"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^2B",["^O",["^2C",["^O",[["^2X","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^C","~$clojure.set/index","^6","clojure/set.cljs","^:",12,"^2K",["^O",[["^2X","^3<"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",87,"^2V",["^B",[null,"^2R"]],"^9",87,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^2X","^3<"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^2B",["^O",["^2C",["^O",[["~$k","~$coll"]]]]]],"^3?",true,"^C","~$clojure.set/bubble-max-key","^6","clojure/set.cljs","^:",22,"^2K",["^O",[["~$k","^3@"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",13,"^2V","~$clj","^9",13,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["~$k","^3@"]]]]]],"~$subset?",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^2B",["^O",["^2C",["^O",[["^37","^38"]]]]],"^;","Is set1 a subset of set2?"],"^C","~$clojure.set/subset?","^6","clojure/set.cljs","^:",14,"^2K",["^O",[["^37","^38"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",131,"^2V","^3:","^9",131,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^37","^38"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^2B",["^O",["^2C",["^O",[["^2X","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^C","~$clojure.set/rename","^6","clojure/set.cljs","^:",13,"^2K",["^O",[["^2X","^3F"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",82,"^2V",["^B",["^3B","^2R","^2Q","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^2X","^3F"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^2B",["^O",["^2C",["^O",[["~$map","^3F"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^C","~$clojure.set/rename-keys","^6","clojure/set.cljs","^:",18,"^2K",["^O",[["^3K","^3F"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",72,"^2V",["^B",[null,"^2R"]],"^9",72,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^3K","^3F"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^2B",["^O",["^2C",["^O",[["^2X","^3<"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^C","~$clojure.set/project","^6","clojure/set.cljs","^:",14,"^2K",["^O",[["^2X","^3<"]]],"^2N",null,"^2L",["^O",[null,null]],"^8",1,"^2H",false,"^7",67,"^2V",["^B",["^3B","^2R","^2Q","^3H","^3I"]],"^9",67,"^2J",2,"^2S",true,"^2B",["^O",["^2C",["^O",[["^2X","^3<"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^2A",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^2B",["^O",["^2C",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^2G",["^ ","^2H",true,"^2I",2,"^2J",2,"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^2L",["^O",[null,null,null]]]],"^C","~$clojure.set/difference","^6","clojure/set.cljs","^:",17,"^2G",["^ ","^2H",true,"^2I",2,"^2J",2,"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^2L",["^O",[null,null,null]]],"^2K",["^O",[["^2D"],["^2D","^2E"]]],"^2N",null,"^2I",2,"^2L",["^O",[null,null,null]],"^8",1,"^2H",true,"^2O",[["^ ","^2I",1,"^2H",false],["^ ","^2I",2,"^2H",false,"^2P",["^B",[null,"^2R"]]],["^ ","^2I",2,"^2H",true,"^2P",["^B",[null,"^2R"]]]],"^7",46,"^9",46,"^2J",2,"^2S",true,"^2B",["^O",[["^2D"],["^2D","^2E"],["^2D","^2E","~$&","^2F"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^M",["^ ","^I","^I"],"^Q",["^ "],"^R",["^ "],"^S",["^J","^I"]],"^F","^D","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^15",[["^3S","~:static-fns"],true,["^3S","~:elide-asserts"],false,["^3S","~:optimize-constants"],null,["^3S","^X"],null,["^3S","~:external-config"],null,["^3S","~:tooling-config"],null,["^3S","~:emit-constants"],null,["^3S","~:load-tests"],null,["^3S","~:form-size-threshold"],null,["^3S","~:infer-externs"],true,["^3S","^Z"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3S","~:fn-invoke-direct"],null,["^3S","~:source-map"],"/dev/null"]]]